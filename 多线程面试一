第一题：线程的基本概念、线程的基本状态及状态之间的关系？

线程：是进程中的一个执行控制单元，执行路径

      一个进程中至少有一个线程在负责控制程序的执行

      一个进程中如果只有一个执行路径，这个程序称为单线程

      一个进程中有多个执行路径时，这个程序成为多线程

一个线程是进程的一个顺序执行流。同类的多个线程共享一块内存空间和一组系统资源，线程本身有一个供程序执行时的堆栈。线程在切换时负荷小，因此，线程也被称为轻负荷进程。一个进程中可以包含多个线程。

在JVM内存模型中，线程开辟在栈中，有些前辈称之为方法的栈帧，对于这个栈帧空间就是一个线程空间，也就是一个进程调用了一个方法，这个方法在栈中就开辟一个空间，也可以认为是线程的空间，当该方法结束后，该线程就结束，但进程还在继续执行，还会继续执行接下来的方法，继续开辟线程。。。



线程与进程区别



一个进程有一个或多个线程。线程更细化于进程，使得多线程程序的并发性高。进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。

线程在执行过程中与进程的区别在于每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。

从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用来实现进程的调度和管理以及资源分配。


线程状态
1.新建

new语句创建的线程对象处于新建状态，此时它和其他java对象一样，仅被分配了内存。

2.等待

当线程在new之后，并且在调用start方法前，线程处于等待状态。

3.就绪

当一个线程对象创建后，其他线程调用它的start()方法，该线程就进入就绪状态。处于这个状态的线程位于Java虚拟机的可运行池中，等待cpu的使用权。

4.运行状态

处于这个状态的线程占用CPU，执行程序代码。在并发运行环境中，如果计算机只有一个CPU，那么任何时刻只会有一个线程处于这个状态。

只有处于就绪状态的线程才有机会转到运行状态。

5.阻塞状态

阻塞状态是指线程因为某些原因放弃CPU，暂时停止运行。当线程处于阻塞状态时，Java虚拟机不会给线程分配CPU，直到线程重新进入就绪状态，它才会有机会获得运行状态。

阻塞状态分为三种:

1、等待阻塞:运行的线程执行wait（）方法，JVM会把该线程放入等待池中。

2、同步阻塞:运行的线程在获取对象同步锁时，若该同步锁被别的线程占用，则JVM会把线程放入锁池中。

3、其他阻塞:运行的线程执行Sleep（）方法，或者发出I/O请求时，JVM会把线程设为阻塞状态。当Sleep（）状态超时、或者I/O处理完毕时，线程重新转入就绪状态。

6.死亡状态

当线程执行完run()方法中的代码，或者遇到了未捕获的异常，就会退出run()方法，此时就进入死亡状态，该线程结束生命周期。

第三题：多线程有几种实现方法，都是什么？

最基本的线程实现方式，不做过多的说明。 
extends Thread 
implements Runnable 
implements Callable

Runnable和Callable的区别是， 
（1）Callable规定的方法是call（），Runnable规定的方法是run（）。 
（2）Callable的任务执行后可返回值，而Runnable的任务是不能返回值得 
（3）call方法可以抛出异常，run方法不可以 
（4）运行Callable任务可以拿到一个Future对象，表示异步计算的结果。 
它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。 
通过Future对象可以了解任务执行情况，可取消任务的执行，还可获取执行结果



第四题：多线程同步和互斥有几种实现方法，都是什么？



线程间的同步方法大体可分为两类：用户模式和内核模式。顾名思义，内核模式就是指利用系统内核对象的单一性来进行同步，使用时需要切换内核态与用户态，而用户模式就是不需要切换到内核态，只在用户态完成操作。
用户模式下的方法有：原子操作（例如一个单一的全局变量），临界区。内核模式下的方法有：事件，信号量，互斥量。

 

第五题：多线程同步和互斥有何异同，在什么情况下分别使用他们？举例说明。

线程同步是指线程之间所具有的一种制约关系，一个线程的执行依赖另一个线程的消息，当它没有得到另一个线程的消息时应等待，直到消息到达时才被唤醒。
线程互斥是指对于共享的进程系统资源，在各单个线程访问时的排它性。当有若干个线程都要使用某一共享资源时，任何时刻最多只允许一个线程去使用，其它要使用该资源的线程必须等待，直到占用资源者释放该资源。线程互斥可以看成是一种特殊的线程同步（下文统称为同步）。



