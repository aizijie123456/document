CDN的全称是Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。

发起一个HTTP请求的过程就是建立一个Socket通信过程

三种负载均衡的框架：链路负载均衡、集群负载均衡、操作系统负载均衡
集群负载均衡分为硬件负载均衡和软件负载均衡

CDN动态加速技术：原理是在CDN的DNS解析中通过动态的链路探测来寻找回源最好的一条路径，然后通过DNS的调度将所有请求调度到选定的这条路径上回源，从而加速用户访问的效率。
====================================================================================
不管是磁盘还是网络传输，最小的存储单元都是字节而不是字符，所有I/O操作的都是字节而不是字符，操作字符的I/O接口是因为我们通常
操作的数据都是字符形式的，为了操作方便而提供。

数据持久化或者而网络传输都是以字节进行的，所以必须要有从字符到字节或者从字节到字符的转化。

内存映射的方式是指操作系统将内存中的某一块区域与磁盘中的文件关联起来，当腰访问内存中的一段数据时，转换为访问文件的某一段数据，这种防护四的目的同样是减少数据从内核空间缓存。

Java序列化就是讲一个对象转化成遗传二进制表示的字节数组，通过保存活转移这些字节数据来达到持久化的目的。

对于volatile修饰的变量，jvm虚拟机只是保证从主内存加载到线程工作内存的值是最新的
====================================================================================
web编码问题：
URL的编码在IE下是操作系统的默认编码，而在firefox下则是UTF-8，不同的JS框架可能对URL的编码处理也不一样。
实际上JS处理URL的函数有三个：
1.escape();这个函数是讲ASCII字母、数字、标点符号之外的其他字符转化为Unicode编码值，并且在编码值前面加上“%u”。现在已经废弃
2.encodeURl()：可以将整个URL中的字符进行UTF-8编码，在每个码值前面加上“%”。解码通过decodeURL()
3.encodeURLComponent():这个方法比encodeURI()编码还有彻底，除了 ！ ‘ （ ） * . _ ~ 0-9 a-z A-Z 不进行编码，其他统统编码

JAVA 与 JS 编解码的问题
java 端处理URL编解码有两个类，分别是 java.net.URLEncoder 和 java.net.URLDecoder
====================================================================================

javac主要有四个模块，词法分析器，语法分析器，语义分析器，代码生成器

====================================================================================
Servlet工作原理解析：
Servlet 容易有很多种，比如Jetty tomcat。
在Tomcat的容器等级中，Context容器直接管理servlet在容器中的包装类Wrapper，所以Context容器如何运行将直接影响servlet的工作方式。
Tomcat 结构：Wrapper->Context容器->servlet容器->Host->Engine->Container->Tomcat

Tomcat的启动逻辑是给予观察者模式设计的，所有的容器都会继承Lifecycle接口，它管理着容器的整个生命周期，所有容器的修改和状态的改变都会由他去通知已经注册的观察者

web应用的初始化工作是在ContextConfig的configureStart方法中实现的，应用的初始化主要是解析web.xml文件，这个文件描述了一个web应用的关键信息，也是一个web应用的入口












































